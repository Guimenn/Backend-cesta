generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AppState {
  slug      String   @id @default("shared")
  doc       Json     @default("{}")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  updatedBy String?  @map("updated_by")

  @@map("app_state")
}

model Organization {
  id                       String                   @id @default(cuid())
  name                     String
  slug                     String                   @unique
  description              String?
  settings                 Json?
  createdAt                DateTime                 @default(now())
  updatedAt                DateTime                 @updatedAt
  auditLogs                AuditLog[]
  categories               Category[]
  cestas                   Cesta[]
  clients                  Client[]
  estoque                  Estoque[]
  movimentacoesEstoque     MovimentacaoEstoque[]
  movimentacoesFinanceiras MovimentacaoFinanceira[]
  members                  OrganizationMember[]
  products                 Product[]
  payments                 Payment[]
  users                    User[]
  sales                    Sale[]
  vendasItens              VendaItem[]
  vendors                  Vendor[]

  @@map("organizations")
}

model User {
  id                      String               @id @default(cuid())
  email                   String               @unique
  password                String
  name                    String
  phone                   String?
  active                  Boolean              @default(true)
  role                    UserRoleEnum
  organizationId          String
  createdAt               DateTime             @default(now())
  updatedAt               DateTime             @updatedAt
  auditLogs               AuditLog[]
  categoriesCreated       Category[]           @relation("CategoryCreator")
  clientsCreated          Client[]             @relation("ClientCreator")
  organizationMemberships OrganizationMember[]
  productsCreated         Product[]            @relation("ProductCreator")
  paymentsCreated         Payment[]            @relation("PaymentCreator")
  userRoles               UserRole[]
  organization            Organization         @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  sales                   Sale[]
  vendorsCreated          Vendor[]             @relation("VendorCreator")

  @@unique([email, organizationId])
  @@map("users")
}

model Category {
  id             String       @id @default(cuid())
  name           String
  color          String?
  description    String?
  organizationId String
  createdBy      String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  createdByUser  User         @relation("CategoryCreator", fields: [createdBy], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  products       Product[]

  @@unique([name, organizationId])
  @@map("categories")
}

model Cesta {
  id               String       @id @default(cuid())
  organizationId   String
  nome             String
  descricao        String?
  precoPromocional Float?       @map("preco_promocional")
  ativo            Boolean      @default(true)
  categoria        String?
  itens            Json         @default("[]")
  createdBy        String?      @map("created_by")
  createdAt        DateTime     @default(now()) @map("created_at")
  updatedAt        DateTime     @default(now()) @updatedAt @map("updated_at")
  organization     Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("cestas")
}

model Product {
  id             String       @id @default(cuid())
  name           String
  description    String?
  price          Float
  costPrice      Float?
  categoryId     String?
  organizationId String
  unit           String?
  active         Boolean      @default(true)
  createdBy      String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  category       Category?    @relation(fields: [categoryId], references: [id])
  createdByUser  User         @relation("ProductCreator", fields: [createdBy], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([name, organizationId])
  @@map("products")
}

model Estoque {
  id               String       @id @default(cuid())
  organizationId   String
  nome             String
  categoria        String?
  quantidade       Float        @default(0)
  quantidadeMinima Float        @default(10) @map("quantidade_minima")
  quantidadeMaxima Float        @default(1000) @map("quantidade_maxima")
  precoCusto       Float        @default(0) @map("preco_custo")
  precoVenda       Float        @default(0) @map("preco_venda")
  unidade          String       @default("un")
  localizacao      String?
  fornecedor       String?
  codigoBarras     String?      @map("codigo_barras")
  observacoes      String?
  ativo            Boolean      @default(true)
  createdBy        String?      @map("created_by")
  createdAt        DateTime     @default(now()) @map("created_at")
  updatedAt        DateTime     @default(now()) @updatedAt @map("updated_at")
  organization     Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  vendasItens      VendaItem[]

  @@map("estoque")
}

model MovimentacaoEstoque {
  id                 String       @id @default(cuid())
  organizationId     String
  itemId             String       @map("item_id")
  tipo               String
  quantidade         Float
  quantidadeAnterior Float        @map("quantidade_anterior")
  quantidadeAtual    Float        @map("quantidade_atual")
  motivo             String?
  observacoes        String?
  vendaId            String?      @map("venda_id")
  createdBy          String?      @map("created_by")
  createdAt          DateTime     @default(now()) @map("created_at")
  organization       Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("movimentacoes_estoque")
}

model MovimentacaoFinanceira {
  id             String        @id @default(cuid())
  organizationId String?
  tipo           String
  valor          Float
  descricao      String
  categoria      String?
  data           DateTime      @db.Date
  observacoes    String?
  formaPagamento String?       @map("forma_pagamento")
  createdAt      DateTime      @default(now()) @map("created_at")
  updatedAt      DateTime      @default(now()) @updatedAt @map("updated_at")
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("movimentacoes_financeiras")
}

model OrganizationMember {
  id             String       @id @default(cuid())
  organizationId String
  userId         String
  role           String       @default("vendedor")
  createdAt      DateTime     @default(now()) @map("created_at")
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([organizationId, userId])
  @@map("organization_members")
}

model Client {
  id                 String       @id @default(cuid())
  name               String
  email              String?
  phone              String?
  address            String?
  neighborhood       String?
  city               String?
  state              String?
  zipCode            String?
  observations       String?
  organizationId     String
  createdBy          String
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  cpf                String?
  rg                 String?
  nomeReferencia     String?      @map("nome_referencia")
  telefoneReferencia String?      @map("telefone_referencia")
  ativo              Boolean      @default(true)
  createdByUser      User         @relation("ClientCreator", fields: [createdBy], references: [id])
  organization       Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  payments           Payment[]
  sales              Sale[]

  @@unique([name, organizationId])
  @@map("clients")
}

model Vendor {
  id                 String       @id @default(cuid())
  organizationId     String
  userId             String?      @map("user_id")
  name               String
  email              String?
  phone              String?
  cpf                String?
  cargo              String?
  salarioBase        Float?       @map("salario_base")
  comissaoPercentual Float        @default(5.0) @map("comissao_percentual")
  dataContratacao    DateTime?    @map("data_contratacao") @db.Date
  active             Boolean      @default(true)
  motivoInativacao   String?      @map("motivo_inativacao")
  permissoes         Json         @default("{}")
  createdAt          DateTime     @default(now()) @map("created_at")
  updatedAt          DateTime     @default(now()) @updatedAt @map("updated_at")
  createdBy          String?      @map("created_by")
  sales              Sale[]
  createdByUser      User?        @relation("VendorCreator", fields: [createdBy], references: [id])
  organization       Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([name, organizationId])
  @@map("vendedores")
}

model UserRole {
  id     String @id @default(cuid())
  userId String
  role   String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_roles")
}

model Sale {
  id             String       @id @default(cuid())
  organizationId String
  clientId       String?
  vendorId       String?
  userId         String
  status         SaleStatus   @default(PENDENTE)
  total          Float
  discount       Float        @default(0)
  notes          String?      @map("observacoes")
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @default(now()) @updatedAt @map("updated_at")
  dataVenda      DateTime     @map("data_venda")
  tipoPagamento  String       @map("tipo_pagamento")
  dataEntrega    DateTime?    @map("data_entrega") @db.Date
  createdBy      String?      @map("created_by")
  pagamentos     Json         @default("[]")
  metodoEntrega  String       @default("retirada") @map("metodo_entrega")
  payments       Payment[]
  client         Client?      @relation(fields: [clientId], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id])
  vendor         Vendor?      @relation(fields: [vendorId], references: [id])
  items          VendaItem[]

  @@map("vendas")
}

model VendaItem {
  id             String       @id @default(cuid())
  organizationId String
  vendaId        String       @map("venda_id")
  produtoId      String       @map("produto_id")
  quantidade     Float
  precoUnitario  Float        @map("preco_unitario")
  subtotal       Float
  createdAt      DateTime     @default(now()) @map("created_at")
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  estoque        Estoque      @relation(fields: [produtoId], references: [id])
  venda          Sale         @relation(fields: [vendaId], references: [id], onDelete: Cascade)

  @@map("vendas_itens")
}

model Payment {
  id               String        @id @default(cuid())
  organizationId   String
  saleId           String?
  clientId         String?
  vendedorId       String?       @map("vendedor_id")
  amount           Float
  method           PaymentMethod
  status           PaymentStatus @default(PENDENTE)
  dueDate          DateTime?     @map("data_vencimento")
  paidAt           DateTime?     @map("data_recebimento")
  notes            String?       @map("observacoes")
  createdBy        String        @map("created_by")
  createdAt        DateTime      @default(now()) @map("created_at")
  updatedAt        DateTime      @default(now()) @updatedAt @map("updated_at")
  formaPagamento   String?       @map("forma_pagamento")
  proximoPagamento DateTime?     @map("proximo_pagamento") @db.Date
  client           Client?       @relation(fields: [clientId], references: [id])
  createdByUser    User          @relation("PaymentCreator", fields: [createdBy], references: [id])
  organization     Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  sale             Sale?         @relation(fields: [saleId], references: [id])

  @@map("recebimentos")
}

model AuditLog {
  id             String       @id @default(cuid())
  organizationId String
  userId         String?
  vendedorId     String?      @map("vendedor_id")
  action         AuditAction
  description    String
  entity         String?
  entityId       String?      @map("entity_id")
  amount         Float?
  details        Json         @default("{}")
  ipAddress      String?      @map("ip_address")
  deviceInfo     String?      @map("device_info")
  createdAt      DateTime     @default(now()) @map("created_at")
  createdBy      String?      @map("created_by")
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User?        @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}

enum UserRoleEnum {
  ADMIN
  MANAGER
  VENDEDOR
  RH
  FINANCEIRO
  INVENTARIO
}

enum SaleStatus {
  PENDENTE
  CONCLUIDA
  CANCELADA
  DEVOLVIDA
}

enum PaymentMethod {
  DINHEIRO
  CARTAO_CREDITO
  CARTAO_DEBITO
  PIX
  TRANSFERENCIA
  FIADO
}

enum PaymentStatus {
  PENDENTE
  PAGO
  PARCIAL
  VENCIDO
  CANCELADO
}

enum AuditAction {
  CREATE
  UPDATE
  DELETE
  LOGIN
  LOGOUT
  SALE
  PAYMENT
  INVENTORY_CHANGE
}
